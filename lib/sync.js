(function (exports) {    "use strict";    var path = require("path"),        fs = require("fs"),        $ = require("node-class"),        FTPMirror = require("./ftp-mirror.js").FTP,        FSMirror = require("./fs-mirror.js").FS,        Sync;    $.debug = function() {};    Sync = new $.Class("Sync", {        __target: null,        src: null,        dst: null,        recursive: false,    });    Sync.extends($.Events);    Sync.implements({        __construct: function(cfg) {            this.src = path.normalize(cfg.src);            this.recursive = cfg.recursive;            switch (cfg.protocol) {            case "ftp":                this.__target = new FTPMirror(cfg.target);                this.__target.connect();                break;            case "fs":                this.__target = new FSMirror(cfg.target);                this.__target.connect();                break;            }        },        sync: function () {            console.log("\n#sync\n");            this.__target.list(this.src, true, function(src_list) {                $.debug("al final: ", src_list);                var i = 0,                    max = src_list.length,                    found,                    j,                    jmax,                    target_filename,                    fstarget = this.__target,                    directories = [],                    files = [],                    in_cb,                    src_directory = this.src;                $.SerialExec = function(list, async_fn, callback) {                    if (!list.length) {                        return callback(null, []);                    }                    var copy = list.concat();                    async_fn(copy.shift(), function handler() {                        if (copy.length) {                            async_fn(copy.shift(), handler);                        } else {                            callback(null);                        }                    });                }                $.SerialExec(src_list, function(obj, cb) {                    var archive = obj.path.substr(src_directory.length);                    fstarget.exists(archive, function (exists) {                        $.debug(archive, exists);                        if(!exists) {                            obj.directory ? directories.push(archive) : files.push([path.join(src_directory, archive), archive]);                            cb();                        } else if(!obj.directory) {                            //check filesize                            fstarget.stat(archive, function(err, st) {                                $.debug("exists but changed ?", st.mtime.getTime(), "#", obj.mtime.getTime(), " = ", st.mtime != obj.mtime);                                if(st.mtime.getTime() != obj.mtime.getTime()) {                                    files.push([path.join(src_directory, archive), archive]);                                }                                cb();                            });                        } else {                            cb();                        }                    });                }, function () {                    $.debug("putlist -> ", files, directories);                    fstarget.putlist(files, directories, function() {                        $.debug("done!");                    });                });            }.bind(this));        }    });    exports.Sync = Sync;}(module.exports));